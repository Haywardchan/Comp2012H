int index,i=0,j=0,count=0;
    bool found=false;
    char temp[MAX_STRLEN];
    
        for (int i = 0; i < countCharacters(target)&&(j+i)<countCharacters(str); i++)
        {
            if (str[j+i]==target[j+i])
            {
                count+=1;
                if (count==countCharacters(target)-1)
                {
                    index=i-countCharacters(target);
                    found=true;
                }
                continue;
                
            }else{
                count=0;
                break;
            }
        
        if (found)
        {
            str[0]='k';
        }

        j++;

for (int i = 0; i < countCharacters(str); i++)
    {
        for (int j = i; j < i + countCharacters(target); j++)
        {
            if (str[j]==target[j])
            {
                if(count==countCharacters(target)-1){found=true;}
                count+=1;
                continue;
            }else{
                break;
            }
        }
        count=0;

if(found){
            
            index=i;
            
            int mem=0;
            for (int k = index + countCharacters(target); k < countCharacters(str)+1 ; k++)
            {
                if (k==countCharacters(str))
                {
                    temp[mem]='\0';
                }else{
                    temp[mem]=str[k];
                }
                mem++;
                
            }
            // cout<<temp;
            mem=0;
            for (int m = index; m < (index + countCharacters(to)); m++)
            {
                str[m]=to[mem];
                mem++;
            }
            mem=0;
            // cout<<str;
            for (int i = index+countCharacters(to); i < index+countCharacters(to)+countCharacters(temp)+1; i++)
            {
                if(i==index+countCharacters(to)+countCharacters(temp)){ str[i]='\0'; }
                str[i]=temp[mem];
                mem++;
            }
            
        }

larger_int=(countCharacters(temp1)>countCharacters(temp2))?countCharacters(temp1):countCharacters(temp2);
    for(int i=0; i<larger_int;i++)
    {
        
       
        while (temp1[index_temp1]!=' ')
            {
                temp3[index_temp3]=temp1[index_temp1];
                index_temp1++;
                index_temp3++;
            }
        while (temp2[index_temp2]!=' ')
        {
            temp3[index_temp3]=temp2[index_temp2];
            index_temp2++;
            index_temp3++;
        }
        
            //print yay
            temp3[index_temp3]='y';
            index_temp3++;
            temp3[index_temp3]='a';
            index_temp3++;
            temp3[index_temp3]='y';
            index_temp3++;
            // temp3[index_temp3]=temp2[index_temp2];
            // index_temp2++;
            // index_temp3++;

        
        
        index_temp1++;
        index_temp2++;
    }

    'I',' ','o','u','l','d',' ','i','k','e' ,' ','o', ' ','a','v','e',' ','a','n',' ',
    ,'w','a','l','a','t','a','h',' ',' '
    ,'-','c','r','e','a','m'

    if (str[index_str]==',')
            {
                temp2[index_temp2]=',';
                index_temp2++;
                temp2[index_temp2]='\0';
            }
            if (str[index_str]=='.')
            {
                temp2[index_temp2]='.';
                index_temp2++;
                temp2[index_temp2]='\0';
            }
            count=0;
        while (row_constraints[i][row_constraint_index]!=-1)
        {
            count++;
            row_constraint_index++;
        }
        if (row_constraints[i][0]==-1)
        {count=0;}
        num_row_constraints[i]=count;
        cout<<num_row_constraints[i]<<"\n";

for (int num_blk = num_row_constraints[row_idx]-1; num_blk >= 0; num_blk--)
    {
        cout<<block_can_shift(row_idx, num_blk, position_arr, num_row_constraints[row_idx])<<"\n";
        do{
            found=false;
            if(block_can_shift(row_idx, num_blk, position_arr, num_row_constraints[row_idx]))
                {for(int i=0; i < num_row_constraints[row_idx]; i++){
                    if(i!=num_blk){position_arr_perms[num_perms][i]=position_arr[i];}
                    else {position_arr_perms[num_perms][i]=position_arr[i]+1;}
                    }
                    //put position arr perms into position arr
                    for (int i = 0; i < num_row_constraints[row_idx]; i++)
                    {
                        position_arr[i]=position_arr_perms[num_perms][i];
                    }
                    num_perms++;
                    found=true;
                };
        }while(found);
    }

    else{
                        if(position_arr[num_blk]==num_row_constraints[row_idx])break;
                        position_arr[num_blk+1]++;
                        if(block_can_shift(row_idx, num_blk+1, position_arr, num_row_constraints[row_idx])&&num_blk<num_row_constraints[row_idx])
                        {    
                            for(int i=0; i < num_row_constraints[row_idx]; i++){
                            if(i!=num_blk+1){position_arr_perms[num_perms][i]=position_arr[i];}
                            else {position_arr_perms[num_perms][i]=position_arr[i]+1;}
                            }
                            //put position arr perms into position arr
                            for (int i = 0; i < num_row_constraints[row_idx]; i++)
                            {
                                position_arr[i]=position_arr_perms[num_perms][i];
                            }
                            num_perms++;
                            found=true;
                            }
                        };
// recursive_perms(row_idx, num_row_constraints[row_idx]-1,position_arr,num_row_constraints[row_idx],num_perms,position_arr_perms,starting_position_arr);
        
        // if(!found&&position_arr[num_row_constraints[row_idx]]!=num_cols){position_arr[num_blk]=starting_position_arr[num_blk]+1;found=true;}
    for (int num_blk = num_row_constraints[row_idx]-1; num_blk >= 0; num_blk--)
    {
        // cout<<block_can_shift(row_idx, num_blk, position_arr, num_row_constraints[row_idx])<<"\n";
        
        do{
            found=false;
            if(block_can_shift(row_idx, num_blk, position_arr, num_row_constraints[row_idx]))
                {for(int i=0; i < num_row_constraints[row_idx]; i++){
                    if(i!=num_blk){position_arr_perms[num_perms][i]=position_arr[i];}
                    else {position_arr_perms[num_perms][i]=position_arr[i]+1;}
                    }
                    //put position arr perms into position arr
                    for (int i = 0; i < num_row_constraints[row_idx]; i++)
                    {
                        position_arr[i]=position_arr_perms[num_perms][i];
                    }
                    num_perms++;
                    found=true;
                }
        }while(found);
        if(!found){
            for (int k = num_blk+1; k < num_row_constraints[row_idx]; k++)
            {
                do{
                if(position_arr[num_blk]==num_row_constraints[row_idx])break;
                found2=false;
                if(block_can_shift(row_idx, k, position_arr, num_row_constraints[row_idx])&&num_blk<num_row_constraints[row_idx])
                    {    
                    for(int i=0; i < num_row_constraints[row_idx]; i++){
                    if(i!=k){position_arr_perms[num_perms][i]=position_arr[i];}
                    else {position_arr_perms[num_perms][i]=position_arr[i]+1;}
                        }
                    //put position arr perms into position arr
                    for (int i = 0; i < num_row_constraints[row_idx]; i++)
                    {
                    position_arr[i]=position_arr_perms[num_perms][i];
                    }
                    num_perms++;
                    found2=true;
                    }}while(found2);
            }
        }
        for (int i = 0; i < num_row_constraints[row_idx]; i++)
        {
            position_arr[i]=starting_position_arr[i];
        }
        position_arr[num_blk-1]++;
        
    }

    
void recursive_perms(int row_idx, int block_idx, const int positions[], int& num_pos, int& num_perms, int position_arr_perms[MAX_PERM][MAX_CONSTRAINT_NUM], const int starting_positions[]){
    for (int i = 0; i < num_cols ; i++){
        position_arr_perms[num_perms][i] = positions[i];
    }
    if(block_can_shift(row_idx, block_idx, position_arr_perms[num_perms], num_row_constraints[row_idx]))
                {for(int i=0; i < num_row_constraints[row_idx]; i++){
                    if(i!=block_idx){position_arr_perms[num_perms][i]=positions[i];}
                    else {position_arr_perms[num_perms][i]=positions[i]+1;}
                    }
                    num_perms++;
                    for(int k = 0;k < num_row_constraints[row_idx];k++){
                        for(int i=0; i < num_row_constraints[row_idx]; i++){
                        position_arr_perms[num_perms][block_idx]=position_arr_perms[num_perms-1][block_idx];
                        }
                        
                        position_arr_perms[num_perms][block_idx]=starting_positions[block_idx];
                        recursive_perms(row_idx, num_row_constraints[row_idx]-1-k,position_arr_perms[num_perms-1],num_row_constraints[row_idx],num_perms,position_arr_perms,starting_positions);
                    }
                };
    
    return;
    
}

 for (int i = 0; i < num_cols ; i++){
        position_arr_perms[num_perms][i] = positions[i];
    }
    if(block_can_shift(row_idx, block_idx, position_arr_perms[num_perms], num_row_constraints[row_idx])){
        for(int i=0; i < num_row_constraints[row_idx]; i++){
        if(i!=block_idx){position_arr_perms[num_perms][i]=positions[i];}
        else {position_arr_perms[num_perms][i]=positions[i]+1;}
        }
        positions[block_idx]++;
        num_perms++;
        
        recursive_perms(row_idx, block_idx, positions, num_row_constraints[row_idx], num_perms, position_arr_perms);
    }else{
        
        for (int k = block_idx-1; k >=0; k--)
        {
            // cout<<block_can_shift(row_idx, k, position_arr_perms[num_perms], num_row_constraints[row_idx]);
            if(block_can_shift(row_idx, k, position_arr_perms[num_perms-1], num_row_constraints[row_idx])){
                for(int i=0; i < num_row_constraints[row_idx]; i++){
                    if(i!=k){position_arr_perms[num_perms][i]=positions[i];}
                    else {position_arr_perms[num_perms][i]=positions[i]+1;}
                    }
                    positions[k]++;
                    num_perms++;
                    recursive_perms(row_idx, k, positions, num_row_constraints[row_idx], num_perms, position_arr_perms);
            }
        }
    }

    return;

    // for (int i = 0; i < num_rows; i++)
    // {   
    //     count_constraint=0;
    //     row_constraint_index=0;
    //     cout << "Enter the number of constraints for row " << i << " (end with -1): ";
        
    //     while(row_constraints[i][row_constraint_index]!=-1){
    //         cin>>row_constraints[i][row_constraint_index];
    //         // cout<<row_constraints[i][row_constraint_index]<<"\n";
    //         if(row_constraints[i][row_constraint_index]!=-1){
    //             count_constraint++;
                
    //             count_constraint+=row_constraints[i][row_constraint_index];
    //             // cout<<"test:"<<count_constraint<<"  "<<row_constraints[i][row_constraint_index]<<" ";
    //             row_constraint_index++;
    //         }
    //     }
    //     if(count_constraint>0)count_constraint-=1;
    //     // cout<<count_constraint;
        if (num_cols < count_constraint){
            cout << "Invalid row constraint, please try again." << endl;
            for(int j = 0;j < row_constraint_index;j++)row_constraints[i][j]=1;
            i--;
            row_constraint_index-=count_constraint;
            count_constraint=0;
            }
    // }

    // for (int i = 0; i < num_cols; i++)
    // {
    //     count_constraint=0;
    //     col_constraint_index=0;
    //     cout << "Enter the number of constraints for column " << i << " (end with -1): ";
    //     while(col_constraints[i][col_constraint_index]!=-1){
    //         cin>>col_constraints[i][col_constraint_index];
    //         // cout<<col_constraints[i][col_constraint_index]<<"\n";
    //         if(col_constraints[i][col_constraint_index]!=-1){
    //             count_constraint++;
    //             count_constraint+=col_constraints[i][col_constraint_index];
    //             cout<<"test:"<<count_constraint<<"  "<<col_constraints[i][col_constraint_index]<<" ";
    //             col_constraint_index++;
    //             cout<<"this: "<<col_constraints[i][col_constraint_index];
    //         }
    //     }
    //     if(count_constraint>0)count_constraint-=1;
    //     // cout<<count_constraint;
    //     if (num_rows < count_constraint){
    //         cout << "Invalid column constraint, please try again." << endl;
    //         for(int j = 0;j < col_constraint_index;j++)col_constraints[i][j]=1;
    //         i--;
    //         col_constraint_index-=count_constraint;
    //         count_constraint=0;
    //         }
    // }
    //initialize a board array filled with dots
    // num_rows=5;
    // num_cols=5;
    for (int i = 0; i < num_rows; i++)
    {
        for (int j = 0; j < num_cols; j++)
        {
            board[i][j]='.';
        }
    }
     // //find number of row constraints
    // for (int i = 0; i < num_rows; i++)
    // {
    //     row_constraint_index=0;
    //     count=0;
    //     while (row_constraints[i][row_constraint_index]!=-1)
    //     {
    //         count++;
    //         row_constraint_index++;
    //     }
    //     num_row_constraints[i]=count;
    //     // cout<<num_row_constraints[i]<<" ";
    // }
    // //find number of column constraints
    // for (int i = 0; i < num_cols; i++)
    // {
    //     col_constraint_index=0;
    //     count=0;
    //     while (col_constraints[i][col_constraint_index]!=-1)
    //     {
    //         count++;
    //         col_constraint_index++;
    //     }
    //     num_col_constraints[i]=count;
    //     // cout<<num_col_constraints[i]<<" ";
    // }

    /* WRITE_TO_FROM(board[2],row_perms[2][0]);

    cout << "test     :";
    for(int j = 0; j<5;j++)
        cout << board[2][j]; */

    get_row_perms(rows_idx);
    do 
    {
        /* if(rows_idx==0)
            cout <<"    test    " <<num_perms;
        WRITE_TO_FROM(board[rows_idx],row_perms[rows_idx][0]); */
        
        /* cout << "test row " << rows_idx << " perm "<<num_perms<<" : ";
        for(int j = 0; j<5;j++)
            cout << board[2][j];
        cout << endl; */
        if(num_perms<MAX_PERM)WRITE_TO_FROM(board[rows_idx],row_perms[rows_idx][num_perms]);
        if(check_rows_valid(rows_idx+1)&&(rows_idx<num_rows-1))
            recursive_solve(rows_idx+1,0);
        if(check_rows_valid(num_rows))
        {
            return;   
        };
        num_perms++;
    } while(num_perms < num_row_perms[rows_idx]);
    
    return;


    bool check_rows_valid(int num_complete_rows) {
    // START YOUR CODES HERE
    int temp_num_col_constriants, length_needed ;   //count it by counting the last consecutive elements
    
/*     if(num_complete_rows == num_rows)
        return check_whole_board_valid(); */

    for(int col = 0; col < num_cols; col++)
    {        
        int temp_col_constriants[MAX_CONSTRAINT_NUM] = {0};
        temp_num_col_constriants = 0; length_needed = 0;  //initialize
        
        for(int i = 0; i < MAX_CONSTRAINT_NUM; i++)
            temp_col_constriants[i] = 0;

        for(int row = 0; row < num_complete_rows; row++)
        {
            if((board[row][col] == 'X')&&(row == num_complete_rows-1))  //last col is a X
            {
                if((row == 0)||(board[row-1][col] == '.'))              //if first element
                    temp_col_constriants[temp_num_col_constriants] = 1 ;        //initialize
                else
                    temp_col_constriants[temp_num_col_constriants]++;
                temp_num_col_constriants++;
            }
            else if((board[row][col] == 'X')&&(board[row+1][col] == '.')) //It is the last consecutive elements (but not the end)
            {
                if((row == 0)||(board[row-1][col] == '.'))              //if first element
                    temp_col_constriants[temp_num_col_constriants] = 1 ;        //initialize
                else
                    temp_col_constriants[temp_num_col_constriants]++;
                temp_num_col_constriants++ ;
            }
            else if(board[row][col] == 'X')                                 //elements not last                           
            {
                if((row == 0)||(board[row-1][col] == '.'))              //if first element 
                    temp_col_constriants[temp_num_col_constriants] = 1 ;        //initialize
                else
                    temp_col_constriants[temp_num_col_constriants]++;
            }
        };

        /* cout << "col " << col <<": " << temp_col_constriants[0] << " " << temp_col_constriants[1] << " " << temp_col_constriants[2] << endl;
        cout << "col " << col <<": " << temp_num_col_constriants << endl; */

        if(temp_num_col_constriants > num_col_constraints[col])
            return false;

        //case 1: admit the constraint requirement
        for (int temp_constraints_idx = 0; temp_constraints_idx < temp_num_col_constriants; temp_constraints_idx++)   //No need to care about the completed case    
        {
            if(temp_constraints_idx < temp_num_col_constriants-1)    //Not last constriants   //if it is not last constraints, it need to exactly equal to the answer
            {
                if(temp_col_constriants[temp_constraints_idx] != col_constraints[col][temp_constraints_idx])
                    return false;
            }
            else                                            //last constraints 
                {   
                    if(board[num_complete_rows-1][col] == 'X') 
                    {                        
                        if(temp_col_constriants[temp_constraints_idx] > col_constraints[col][temp_constraints_idx])
                            return false;
                    }     
                    else
                    {
                        if(temp_col_constriants[temp_constraints_idx] != col_constraints[col][temp_constraints_idx])
                            return false;
                    }
                };
        }; 
        //case 2: calculate the required space for remaining constraints
        if ((board[num_complete_rows-1][col] == 'X'))
        {
            length_needed += col_constraints[col][temp_num_col_constriants-1] - temp_col_constriants[temp_num_col_constriants-1];
            for (int i = temp_num_col_constriants; i < num_col_constraints[col]; i++)
            {
                length_needed++; //the space after that
                length_needed += col_constraints[col][i];
            };
            //cout << num_rows - num_complete_rows << " " << length_needed << endl;
        }
        else if(board[num_complete_rows-1][col] == '.')
        {
            for (int i = temp_num_col_constriants; i < num_col_constraints[col]; i++)
            {
                length_needed++; //the space after that
                length_needed += col_constraints[col][i];
            };
            if (length_needed)
                length_needed--;

        };


        if((num_rows - num_complete_rows) < length_needed)
        {    
            //cout << "col: " << col << "false";
            return false;
        }
    };
    
  
    return true;    // added to pass compilation

    // END YOUR CODES HERE
}

    // fermet(num,x,y);
    // while(!is_prime(x)||!is_prime(y)){
    //     if(is_prime(x))primefactor_list[idx]=x;
    //     else fermet(x,x,y);
    //     if(is_prime(y))primefactor_list[idx]=y;
    //     else fermet(y,x,y);
    // }

void fermet(const int num,  int &x, int& y);

// void fermet(const int num, int &x, int& y){
//     long double n;
//     if(is_prime(num))return;
//     else{
//         for (int test_num = 1; test_num < MAX_VALUE; test_num++)
//         {
//             n=sqrt(num+test_num*test_num);
//             // cout<<n<<" "<<num<<"hi?"<<"\n";
//             if(!abs(n-int(n))>0.5){
//                 x=n+test_num;
//                 y=n-test_num;
//                 break;
//             }
//         }
//     }
//     cout<<x<<" "<<y;
//     return;
// }

//traverse to last
    while(temp->next!=deque.sentinel){
        temp=temp->next;
    }
    while(temp->prev!=deque.sentinel){
        temp=temp->prev;
        delete temp->next;
        temp->next=nullptr;
    }
    delete deque.sentinel;
    deque.sentinel=nullptr;

void pop_back(Deque& deque){
    if(empty(deque))cout << "Cannot pop_back: deque is empty" << endl;
    else{
        *(deque.end.current-1)=0;
    }
    return;
}
void pop_front(Deque& deque){
    if(empty(deque))cout << "Cannot pop_front: deque is empty" << endl;
    else{
        *(deque.start.current)=0;
    }
    return;
}
void destroy_deque(Deque& deque){
    // while (deque.sentinel->next!=deque.sentinel)
    // {
    //     deque.sentinel->next=deque.sentinel->next->next;
    //     delete deque.sentinel->next->next->prev;
    // }
    // deque.sentinel=nullptr;
    return;
}

for(Node*p=deque.sentinel->next;p!=deque.sentinel->next;p=p->next){
        for(int i : p->arr){
            cout<<i<<", ";
        }
    }
    // while(temp.current!=deque.end.current){
    //     cout<<temp.current;
    //     temp.current=temp.current+1;
    // }

if(deque.start.current!=deque.start.first){
        while (not_inserted)
        {
            if(run.current==pos.current){
                *(run.current-1)=val;
                not_inserted=false;
            }
            if(run.current!=run.first){
                *(run.current-1)=*run.current;
                run=next(run);
            }else{
                *(run.node->prev->arr+CHUNK_SIZE-1)=*run.current;
                run=next(run);
            }
        }
    }else{
        //make a new node at the front
        Node*new_node=new Node;
        new_node->next=deque.sentinel->next;
        deque.sentinel->next=new_node;
        new_node->next->prev=new_node;
        new_node->prev=deque.sentinel;
        deque.ll_size++;

        while (not_inserted)
        {
            if(run.current==pos.current){
                if(pos.current!=pos.first){
                    *(run.current-1)=val;
                }else{
                    *(run.node->prev->arr+CHUNK_SIZE-1)=*run.current;
                }
                    not_inserted=false;
            }
            if(run.current!=run.first){
                *(run.current-1)=*run.current;
                run=next(run);
            }else{
                *(run.node->prev->arr+CHUNK_SIZE-1)=*run.current;
                run=next(run);
            }
        }
        deque.start=prev(deque.start);
    }
    switch (d)
    {
    case UP:
        for (int y = py+1; y < py+range+1; y++)
        {
            if(map[px][y]->get_unit_type()==MONSTER){
                nearest_monster->data=dynamic_cast<Monster*>(map[px][y]);
                in_range=true;
                break;
            }
        }
        break;
    case DOWN:
        for (int y = py-range; y < py; y++)
            {
                if(map[px][y]->get_unit_type()==MONSTER){
                    nearest_monster->data=dynamic_cast<Monster*>(map[px][y]);
                    in_range=true;
                    break;
                }
            }
        break;
    case LEFT:
        for (int x = px-range; x < px; x++)
        {
            if(map[x][py]->get_unit_type()==MONSTER){
                nearest_monster->data=dynamic_cast<Monster*>(map[x][py]);
                in_range=true;
                break;
            }
        }
        break;
    case RIGHT:
        for (int x = px+1; x < px+range+1; x++)
            {
                if(map[x][py]->get_unit_type()==MONSTER){
                    nearest_monster->data=dynamic_cast<Monster*>(map[x][py]);
                    in_range=true;
                    break;
                }
            }
        break;
    }

MonsterNode* monster2deactivate=nullptr;
    MonsterNode* prev_monster=nullptr;
    for(MonsterNode* temp=head;temp=nullptr;temp=temp->next){
        if(temp->next->data==monster){
            prev_monster=temp;
            monster2deactivate=temp->next;
            break;
        }
    }
    if(monster2deactivate!=nullptr && prev_monster!=nullptr){
        if(monster2deactivate==head){
            head=head->next;
        }else{
            prev_monster->next=monster2deactivate->next;
        }
        delete monster2deactivate;
    }
int attack, defense, range, px, py, x, y;
    px=x;
    py=y;
    player->get_position(px, py); 
    player->get_atk_def(attack, defense);
    range=player->get_range();
    Monster*nearest_monster=nullptr;   //default
    for(int i=0; i<range;i++){
        switch (player->get_direction())
        {
            case UP:
                py++;
                if(py>=MAP_SIZE)return;
                break;
            case DOWN:
                py--;
                if(py<0)return;
                break;
            case LEFT:
                px--;
                if(px<0)return;
                break;
            case RIGHT:
                px++;
                if(py>=MAP_SIZE)return;
                break;
        }
        if (player->skill(attack, range)==1)return;

        if(map[px][py]->get_unit_type()==MONSTER){
            nearest_monster=dynamic_cast<Monster*>(map[px][py]);
            player->skill(attack, range);

            if(nearest_monster->attacked_by(attack)==1){
                deactivate_monster(nearest_monster);
                player->gain_exp(1);
            }else if(!nearest_monster->is_active()){
                activate_monster(nearest_monster);
            }
            return;
        }
        
    }
    return;






//find the coordinates first
	vector<double, double> coordinates(new_rows*new_cols,0,0);
	vector<double, double> mycoordinates(new_rows*new_cols,0,0);
	
	int idx=0;
	for(int i=0;i<new_rows;i++){
		for(int j=0;j<new_cols;j++){
			coordinates[idx][0]=i+0.5;
			coordinates[idx][1]=j+0.5;
		}
	}
	idx=0;
	for(int i=0;i<rows;i++){
		for(int j=0;j<cols;j++){
			mycoordinates[idx][0]=(i+0.5)*rows/new_rows;
			mycoordinates[idx][1]=(j+0.5)*cols/new_cols;
			idx++;
		}
	}
	int smallest_idx=0;
	//compute the nearest dist
	for(int i=0;i<new_rows-1;i++){
		for(int j=0;j<new_cols-1;j++){
			smallest_idx=(dist(mycoordinates[smallest_idx][0]-coordinates[i][0],mycoordinates[smallest_idx][1]-coordinates[j][1])<
			dist(mycoordinates[smallest_idx+1][0]-coordinates[i][0],mycoordinates[smallest_idx+1][1]-coordinates[j][1]))?smallest_idx:smallest_idx+1;
		}
	}


    auto filter=[&](Node* temproot, vector<int> container){
        string str;
        bool same_prefix=true;
        vector<int>::iterator it=container.begin();
        while(it!=container.end()){
            str+=index_to_character(*it);
            it++;
            if(str[*it]!=key[*it])same_prefix=false;
        }
        if(same_prefix){
            Node* nnode=d3.add_node(str.c_str());
            nnode->meaning=temproot->meaning;
        }
    };
    if(find_node(key)!=nullptr){
        foreach(filter);
    }